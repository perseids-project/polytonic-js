{"version":3,"sources":["components/Input/Input.js","components/Input/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["layout","default","shift","display","{copy}","Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","layoutName","shifted","handleChange","bind","assertThisInitialized","handleKeyboardChange","handleKeyPress","copyTextarea","event","target","setInput","keyboardRef","keyboard","setState","_this2","caretPosition","_ref","elem","textareaRef","pos","focus","setSelectionRange","button","_ref2","_ref3","doc","window","document","execCommand","select","blur","_this3","_this$state","react_default","a","createElement","react","className","ref","r","type","placeholder","autoComplete","autoCorrect","autoCapitalize","spellCheck","rows","onChange","react_simple_keyboard_build_default","onKeyPress","mergeDisplay","preventMouseDownDefault","newLineOnEnter","Component","App","react_router_dom","basename","process","Fragment","build","role","react_router","exact","path","component","report","github","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","getElementById","URL","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5ce8263b.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport Keyboard from 'react-simple-keyboard';\n\n// see https://github.com/yannickcr/eslint-plugin-react/issues/2209\n/* eslint-disable react/no-unused-state */\n\nconst layout = {\n  default: [\n    '` 1 2 3 4 5 6 7 8 9 0 \\u0313\\u0342 \\u0313\\u0300 {bksp}',\n    '{tab} ; ς ε ρ τ υ θ ι ο π \\u0342 \\u0300 \\\\',\n    '{lock} α σ δ φ γ η ξ κ λ \\u0301 \\u0313 {enter}',\n    '{shift} ζ χ ψ ω β ν μ , . \\u0313\\u0301 {copy}',\n    '.com @ {space}',\n  ],\n  shift: [\n    '~ ! @ # $ % ^ & * ( ) \\u0314\\u0342 \\u0314\\u0300 {bksp}',\n    '{tab} : \\u0308\\u0301 Ε Ρ Τ Υ Θ Ι Ο Π \\u0345 \\u0300 |',\n    '{lock} Α Σ Δ Φ Γ Η Ξ Κ Λ \\u0308 \\u0314 {enter}',\n    '{shift} Ζ Χ Ψ Ω Β Ν Μ < > \\u0314\\u0301 {copy}',\n    '.com @ {space}',\n  ],\n};\n\nconst display = {\n  '{copy}': 'copy',\n};\n\nconst setCaret = (elem, pos) => {\n  elem.focus();\n\n  if (pos !== null && elem.setSelectionRange) {\n    elem.setSelectionRange(pos, pos);\n  }\n};\n\nclass Input extends Component {\n  state = {\n    value: '',\n    layoutName: 'default',\n    shifted: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyboardChange = this.handleKeyboardChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.copyTextarea = this.copyTextarea.bind(this);\n  }\n\n  handleChange(event) {\n    const { value } = event.target;\n    const { setInput } = this.keyboardRef.keyboard;\n\n    this.setState({ value }, () => setInput(value));\n  }\n\n  handleKeyboardChange(value) {\n    const { caretPosition } = this.keyboardRef.keyboard;\n\n    this.setState(({ shifted }) => {\n      if (shifted) {\n        return {\n          value,\n          shifted: false,\n          layoutName: 'default',\n        };\n      }\n\n      return { value };\n    }, () => setCaret(this.textareaRef, caretPosition));\n  }\n\n  handleKeyPress(button) {\n    if (button === '{copy}') {\n      this.copyTextarea();\n    }\n\n    if (button === '{shift}') {\n      this.setState(({ shifted }) => ({\n        layoutName: shifted ? 'default' : 'shift',\n        shifted: !shifted,\n      }));\n    }\n\n    if (button === '{lock}') {\n      this.setState(({ layoutName }) => ({\n        layoutName: layoutName === 'default' ? 'shift' : 'default',\n        shifted: false,\n      }));\n    }\n  }\n\n  copyTextarea() {\n    // eslint-disable-next-line no-undef\n    const doc = window ? window.document : null;\n\n    if (doc && doc.execCommand) {\n      this.textareaRef.select();\n      doc.execCommand('copy');\n      this.textareaRef.blur();\n    }\n  }\n\n  render() {\n    const { value, layoutName } = this.state;\n\n    return (\n      <Fragment>\n        <div className=\"row pt-4 mb-3\">\n          <div className=\"col-12 text-center\">\n            <h1 className=\"h3 font-weight-normal\">\n              Polytonic Greek Virtual Keyboard\n            </h1>\n          </div>\n        </div>\n        <div className=\"mt-4\">\n          <div className=\"mb-2\">\n            <textarea\n              ref={(r) => { this.textareaRef = r; }}\n              className=\"form-control input-lg\"\n              type=\"text\"\n              placeholder=\"Type using the virtual keyboard ...\"\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              rows=\"4\"\n              value={value}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div>\n            <Keyboard\n              ref={(r) => { this.keyboardRef = r; }}\n              onChange={this.handleKeyboardChange}\n              onKeyPress={this.handleKeyPress}\n              layout={layout}\n              display={display}\n              mergeDisplay\n              layoutName={layoutName}\n              preventMouseDownDefault\n              newLineOnEnter\n            />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Input;\n","import Input from './Input';\n\nexport default Input;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { PerseidsHeader, PerseidsFooter } from 'perseids-react-components';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Input from '../Input';\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <React.Fragment>\n      <PerseidsHeader>\n        Greek Polytonic Keyboard\n      </PerseidsHeader>\n      <main role=\"main\">\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Input} />\n          </Switch>\n        </div>\n      </main>\n      <PerseidsFooter\n        report=\"https://github.com/perseids-project/polytonic-js\"\n        github=\"https://github.com/perseids-project/polytonic-js/issues\"\n      />\n    </React.Fragment>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'typeface-tinos';\nimport 'typeface-arimo';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'perseids-react-components/build/css/index.css';\nimport 'react-simple-keyboard/build/css/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}